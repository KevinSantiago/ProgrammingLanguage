Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    RBRACE
    FROM
    INTEGRAL
    LBRACE
    WHEN
    INFINITY
    SUMMATION
    PRODUCT
    SHOW
    LIMIT
    TO
    DERIVATIVE
    OF

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR EQUALS expression
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression POWER expression
Rule 6     expression -> expression TIMES expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> MINUS expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> INT
Rule 11    expression -> FLOAT
Rule 12    expression -> VAR

Terminals, with rules where they appear

DERIVATIVE           : 
DIVIDE               : 7
EQUALS               : 1
FLOAT                : 11
FROM                 : 
INFINITY             : 
INT                  : 10
INTEGRAL             : 
LBRACE               : 
LIMIT                : 
LPAREN               : 9
MINUS                : 4 8
OF                   : 
PLUS                 : 3
POWER                : 5
PRODUCT              : 
RBRACE               : 
RPAREN               : 9
SHOW                 : 
SUMMATION            : 
TIMES                : 6
TO                   : 
VAR                  : 1 12
WHEN                 : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 7 8 9
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR EQUALS expression
    (2) statement -> . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    VAR             shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3

    expression                     shift and go to state 7
    statement                      shift and go to state 6

state 1

    (9) expression -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 9

state 2

    (10) expression -> INT .

    PLUS            reduce using rule 10 (expression -> INT .)
    MINUS           reduce using rule 10 (expression -> INT .)
    POWER           reduce using rule 10 (expression -> INT .)
    TIMES           reduce using rule 10 (expression -> INT .)
    DIVIDE          reduce using rule 10 (expression -> INT .)
    $end            reduce using rule 10 (expression -> INT .)
    RPAREN          reduce using rule 10 (expression -> INT .)


state 3

    (11) expression -> FLOAT .

    PLUS            reduce using rule 11 (expression -> FLOAT .)
    MINUS           reduce using rule 11 (expression -> FLOAT .)
    POWER           reduce using rule 11 (expression -> FLOAT .)
    TIMES           reduce using rule 11 (expression -> FLOAT .)
    DIVIDE          reduce using rule 11 (expression -> FLOAT .)
    $end            reduce using rule 11 (expression -> FLOAT .)
    RPAREN          reduce using rule 11 (expression -> FLOAT .)


state 4

    (1) statement -> VAR . EQUALS expression
    (12) expression -> VAR .

    EQUALS          shift and go to state 10
    PLUS            reduce using rule 12 (expression -> VAR .)
    MINUS           reduce using rule 12 (expression -> VAR .)
    POWER           reduce using rule 12 (expression -> VAR .)
    TIMES           reduce using rule 12 (expression -> VAR .)
    DIVIDE          reduce using rule 12 (expression -> VAR .)
    $end            reduce using rule 12 (expression -> VAR .)


state 5

    (8) expression -> MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 11

state 6

    (0) S' -> statement .



state 7

    (2) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    $end            reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    POWER           shift and go to state 13
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 16


state 8

    (12) expression -> VAR .

    PLUS            reduce using rule 12 (expression -> VAR .)
    MINUS           reduce using rule 12 (expression -> VAR .)
    POWER           reduce using rule 12 (expression -> VAR .)
    TIMES           reduce using rule 12 (expression -> VAR .)
    DIVIDE          reduce using rule 12 (expression -> VAR .)
    $end            reduce using rule 12 (expression -> VAR .)
    RPAREN          reduce using rule 12 (expression -> VAR .)


state 9

    (9) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 17
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    POWER           shift and go to state 13
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 16


state 10

    (1) statement -> VAR EQUALS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 18

state 11

    (8) expression -> MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> MINUS expression .)
    MINUS           reduce using rule 8 (expression -> MINUS expression .)
    POWER           reduce using rule 8 (expression -> MINUS expression .)
    TIMES           reduce using rule 8 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 8 (expression -> MINUS expression .)
    $end            reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! POWER           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 12

    (6) expression -> expression TIMES . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 19

state 13

    (5) expression -> expression POWER . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 20

state 14

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 21

state 15

    (4) expression -> expression MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 22

state 16

    (7) expression -> expression DIVIDE . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 1
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    VAR             shift and go to state 8

    expression                     shift and go to state 23

state 17

    (9) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)


state 18

    (1) statement -> VAR EQUALS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> VAR EQUALS expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    POWER           shift and go to state 13
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 16


state 19

    (6) expression -> expression TIMES expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    POWER           reduce using rule 6 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 6 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 6 (expression -> expression TIMES expression .)
    $end            reduce using rule 6 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 6 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15

  ! PLUS            [ reduce using rule 6 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression TIMES expression .) ]
  ! POWER           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 20

    (5) expression -> expression POWER expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    POWER           reduce using rule 5 (expression -> expression POWER expression .)
    $end            reduce using rule 5 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 5 (expression -> expression POWER expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 16

  ! PLUS            [ reduce using rule 5 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 5 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression POWER expression .) ]
  ! POWER           [ shift and go to state 13 ]


state 21

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 3 (expression -> expression PLUS expression .)
    POWER           reduce using rule 3 (expression -> expression PLUS expression .)
    TIMES           reduce using rule 3 (expression -> expression PLUS expression .)
    DIVIDE          reduce using rule 3 (expression -> expression PLUS expression .)
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! POWER           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 22

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 4 (expression -> expression MINUS expression .)
    POWER           reduce using rule 4 (expression -> expression MINUS expression .)
    TIMES           reduce using rule 4 (expression -> expression MINUS expression .)
    DIVIDE          reduce using rule 4 (expression -> expression MINUS expression .)
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! POWER           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 23

    (7) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    POWER           reduce using rule 7 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15

  ! PLUS            [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ shift and go to state 13 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 16 ]

