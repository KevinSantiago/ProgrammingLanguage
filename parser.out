Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    WHEN
    PRODUCT
    YVALUE
    INFINITY
    FROM
    TVALUE
    LBRACE
    ZVALUE
    LIMIT
    RBRACE
    SHOW
    TO
    SUMMATION

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR EQUALS expression
Rule 2     statement -> VAR EQUALS XVALUE
Rule 3     statement -> expression
Rule 4     expression -> INTEGRAL OF expression
Rule 5     expression -> DERIVATIVE OF expression
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> expression POWER expression
Rule 9     expression -> expression TIMES expression
Rule 10    expression -> expression DIVIDE expression
Rule 11    expression -> MINUS expression
Rule 12    expression -> LPAREN expression RPAREN
Rule 13    expression -> INT
Rule 14    expression -> FLOAT
Rule 15    expression -> VAR

Terminals, with rules where they appear

DERIVATIVE           : 5
DIVIDE               : 10
EQUALS               : 1 2
FLOAT                : 14
FROM                 : 
INFINITY             : 
INT                  : 13
INTEGRAL             : 4
LBRACE               : 
LIMIT                : 
LPAREN               : 12
MINUS                : 7 11
OF                   : 4 5
PLUS                 : 6
POWER                : 8
PRODUCT              : 
RBRACE               : 
RPAREN               : 12
SHOW                 : 
SUMMATION            : 
TIMES                : 9
TO                   : 
TVALUE               : 
VAR                  : 1 2 15
WHEN                 : 
XVALUE               : 2
YVALUE               : 
ZVALUE               : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 4 5 6 6 7 7 8 8 9 9 10 10 11 12
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR EQUALS expression
    (2) statement -> . VAR EQUALS XVALUE
    (3) statement -> . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    VAR             shift and go to state 2
    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9

    statement                      shift and go to state 1
    expression                     shift and go to state 8

state 1

    (0) S' -> statement .



state 2

    (1) statement -> VAR . EQUALS expression
    (2) statement -> VAR . EQUALS XVALUE
    (15) expression -> VAR .

    EQUALS          shift and go to state 10
    PLUS            reduce using rule 15 (expression -> VAR .)
    MINUS           reduce using rule 15 (expression -> VAR .)
    POWER           reduce using rule 15 (expression -> VAR .)
    TIMES           reduce using rule 15 (expression -> VAR .)
    DIVIDE          reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)


state 3

    (11) expression -> MINUS . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 12

state 4

    (4) expression -> INTEGRAL . OF expression

    OF              shift and go to state 13


state 5

    (5) expression -> DERIVATIVE . OF expression

    OF              shift and go to state 14


state 6

    (13) expression -> INT .

    PLUS            reduce using rule 13 (expression -> INT .)
    MINUS           reduce using rule 13 (expression -> INT .)
    POWER           reduce using rule 13 (expression -> INT .)
    TIMES           reduce using rule 13 (expression -> INT .)
    DIVIDE          reduce using rule 13 (expression -> INT .)
    $end            reduce using rule 13 (expression -> INT .)
    RPAREN          reduce using rule 13 (expression -> INT .)


state 7

    (12) expression -> LPAREN . expression RPAREN
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 15

state 8

    (3) statement -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    $end            reduce using rule 3 (statement -> expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17
    POWER           shift and go to state 16
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 18


state 9

    (14) expression -> FLOAT .

    PLUS            reduce using rule 14 (expression -> FLOAT .)
    MINUS           reduce using rule 14 (expression -> FLOAT .)
    POWER           reduce using rule 14 (expression -> FLOAT .)
    TIMES           reduce using rule 14 (expression -> FLOAT .)
    DIVIDE          reduce using rule 14 (expression -> FLOAT .)
    $end            reduce using rule 14 (expression -> FLOAT .)
    RPAREN          reduce using rule 14 (expression -> FLOAT .)


state 10

    (1) statement -> VAR EQUALS . expression
    (2) statement -> VAR EQUALS . XVALUE
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    XVALUE          shift and go to state 22
    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 21

state 11

    (15) expression -> VAR .

    PLUS            reduce using rule 15 (expression -> VAR .)
    MINUS           reduce using rule 15 (expression -> VAR .)
    POWER           reduce using rule 15 (expression -> VAR .)
    TIMES           reduce using rule 15 (expression -> VAR .)
    DIVIDE          reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)
    RPAREN          reduce using rule 15 (expression -> VAR .)


state 12

    (11) expression -> MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 11 (expression -> MINUS expression .)
    MINUS           reduce using rule 11 (expression -> MINUS expression .)
    POWER           reduce using rule 11 (expression -> MINUS expression .)
    TIMES           reduce using rule 11 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 11 (expression -> MINUS expression .)
    $end            reduce using rule 11 (expression -> MINUS expression .)
    RPAREN          reduce using rule 11 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 17 ]
  ! POWER           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 13

    (4) expression -> INTEGRAL OF . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 23

state 14

    (5) expression -> DERIVATIVE OF . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 24

state 15

    (12) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17
    POWER           shift and go to state 16
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 18


state 16

    (8) expression -> expression POWER . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 26

state 17

    (7) expression -> expression MINUS . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 27

state 18

    (10) expression -> expression DIVIDE . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 28

state 19

    (6) expression -> expression PLUS . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 29

state 20

    (9) expression -> expression TIMES . expression
    (4) expression -> . INTEGRAL OF expression
    (5) expression -> . DERIVATIVE OF expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression POWER expression
    (9) expression -> . expression TIMES expression
    (10) expression -> . expression DIVIDE expression
    (11) expression -> . MINUS expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . INT
    (14) expression -> . FLOAT
    (15) expression -> . VAR

    INTEGRAL        shift and go to state 4
    DERIVATIVE      shift and go to state 5
    MINUS           shift and go to state 3
    LPAREN          shift and go to state 7
    INT             shift and go to state 6
    FLOAT           shift and go to state 9
    VAR             shift and go to state 11

    expression                     shift and go to state 30

state 21

    (1) statement -> VAR EQUALS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> VAR EQUALS expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17
    POWER           shift and go to state 16
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 18


state 22

    (2) statement -> VAR EQUALS XVALUE .

    $end            reduce using rule 2 (statement -> VAR EQUALS XVALUE .)


state 23

    (4) expression -> INTEGRAL OF expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 4 (expression -> INTEGRAL OF expression .)
    RPAREN          reduce using rule 4 (expression -> INTEGRAL OF expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17
    POWER           shift and go to state 16
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 4 (expression -> INTEGRAL OF expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> INTEGRAL OF expression .) ]
  ! POWER           [ reduce using rule 4 (expression -> INTEGRAL OF expression .) ]
  ! TIMES           [ reduce using rule 4 (expression -> INTEGRAL OF expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> INTEGRAL OF expression .) ]


state 24

    (5) expression -> DERIVATIVE OF expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 5 (expression -> DERIVATIVE OF expression .)
    RPAREN          reduce using rule 5 (expression -> DERIVATIVE OF expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17
    POWER           shift and go to state 16
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 5 (expression -> DERIVATIVE OF expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> DERIVATIVE OF expression .) ]
  ! POWER           [ reduce using rule 5 (expression -> DERIVATIVE OF expression .) ]
  ! TIMES           [ reduce using rule 5 (expression -> DERIVATIVE OF expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> DERIVATIVE OF expression .) ]


state 25

    (12) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (expression -> LPAREN expression RPAREN .)


state 26

    (8) expression -> expression POWER expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    POWER           reduce using rule 8 (expression -> expression POWER expression .)
    $end            reduce using rule 8 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 8 (expression -> expression POWER expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 18

  ! PLUS            [ reduce using rule 8 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 8 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 8 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression POWER expression .) ]
  ! POWER           [ shift and go to state 16 ]


state 27

    (7) expression -> expression MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 7 (expression -> expression MINUS expression .)
    POWER           reduce using rule 7 (expression -> expression MINUS expression .)
    TIMES           reduce using rule 7 (expression -> expression MINUS expression .)
    DIVIDE          reduce using rule 7 (expression -> expression MINUS expression .)
    $end            reduce using rule 7 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 17 ]
  ! POWER           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 28

    (10) expression -> expression DIVIDE expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    POWER           reduce using rule 10 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 10 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 10 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 10 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 10 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17

  ! PLUS            [ reduce using rule 10 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 10 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 29

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 6 (expression -> expression PLUS expression .)
    POWER           reduce using rule 6 (expression -> expression PLUS expression .)
    TIMES           reduce using rule 6 (expression -> expression PLUS expression .)
    DIVIDE          reduce using rule 6 (expression -> expression PLUS expression .)
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 17 ]
  ! POWER           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 30

    (9) expression -> expression TIMES expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . POWER expression
    (9) expression -> expression . TIMES expression
    (10) expression -> expression . DIVIDE expression

    POWER           reduce using rule 9 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 9 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 9 (expression -> expression TIMES expression .)
    $end            reduce using rule 9 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 9 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 17

  ! PLUS            [ reduce using rule 9 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 9 (expression -> expression TIMES expression .) ]
  ! POWER           [ shift and go to state 16 ]
  ! TIMES           [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 18 ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for POWER in state 23 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 23 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for POWER in state 24 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 24 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 24 resolved as shift
