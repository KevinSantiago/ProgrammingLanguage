Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR = expression
Rule 2     statement -> expression
Rule 3     expression -> expression ^ expression
Rule 4     expression -> expression + expression
Rule 5     expression -> expression - expression
Rule 6     expression -> expression * expression
Rule 7     expression -> expression / expression
Rule 8     expression -> - expression
Rule 9     expression -> ( expression )
Rule 10    expression -> INT
Rule 11    expression -> FLOAT
Rule 12    expression -> VAR

Terminals, with rules where they appear

(                    : 9
)                    : 9
*                    : 6
+                    : 4
-                    : 5 8
/                    : 7
=                    : 1
FLOAT                : 11
INT                  : 10
VAR                  : 1 12
^                    : 3
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 7 8 9
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR = expression
    (2) statement -> . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    VAR             shift and go to state 6
    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1

    expression                     shift and go to state 7
    statement                      shift and go to state 4

state 1

    (11) expression -> FLOAT .

    ^               reduce using rule 11 (expression -> FLOAT .)
    +               reduce using rule 11 (expression -> FLOAT .)
    -               reduce using rule 11 (expression -> FLOAT .)
    *               reduce using rule 11 (expression -> FLOAT .)
    /               reduce using rule 11 (expression -> FLOAT .)
    $end            reduce using rule 11 (expression -> FLOAT .)
    )               reduce using rule 11 (expression -> FLOAT .)


state 2

    (8) expression -> - . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 9

state 3

    (10) expression -> INT .

    ^               reduce using rule 10 (expression -> INT .)
    +               reduce using rule 10 (expression -> INT .)
    -               reduce using rule 10 (expression -> INT .)
    *               reduce using rule 10 (expression -> INT .)
    /               reduce using rule 10 (expression -> INT .)
    $end            reduce using rule 10 (expression -> INT .)
    )               reduce using rule 10 (expression -> INT .)


state 4

    (0) S' -> statement .



state 5

    (9) expression -> ( . expression )
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 10

state 6

    (1) statement -> VAR . = expression
    (12) expression -> VAR .

    =               shift and go to state 11
    ^               reduce using rule 12 (expression -> VAR .)
    +               reduce using rule 12 (expression -> VAR .)
    -               reduce using rule 12 (expression -> VAR .)
    *               reduce using rule 12 (expression -> VAR .)
    /               reduce using rule 12 (expression -> VAR .)
    $end            reduce using rule 12 (expression -> VAR .)


state 7

    (2) statement -> expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    $end            reduce using rule 2 (statement -> expression .)
    ^               shift and go to state 16
    +               shift and go to state 12
    -               shift and go to state 14
    *               shift and go to state 13
    /               shift and go to state 15


state 8

    (12) expression -> VAR .

    ^               reduce using rule 12 (expression -> VAR .)
    +               reduce using rule 12 (expression -> VAR .)
    -               reduce using rule 12 (expression -> VAR .)
    *               reduce using rule 12 (expression -> VAR .)
    /               reduce using rule 12 (expression -> VAR .)
    $end            reduce using rule 12 (expression -> VAR .)
    )               reduce using rule 12 (expression -> VAR .)


state 9

    (8) expression -> - expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    ^               reduce using rule 8 (expression -> - expression .)
    +               reduce using rule 8 (expression -> - expression .)
    -               reduce using rule 8 (expression -> - expression .)
    *               reduce using rule 8 (expression -> - expression .)
    /               reduce using rule 8 (expression -> - expression .)
    $end            reduce using rule 8 (expression -> - expression .)
    )               reduce using rule 8 (expression -> - expression .)

  ! ^               [ shift and go to state 16 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 14 ]
  ! *               [ shift and go to state 13 ]
  ! /               [ shift and go to state 15 ]


state 10

    (9) expression -> ( expression . )
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 17
    ^               shift and go to state 16
    +               shift and go to state 12
    -               shift and go to state 14
    *               shift and go to state 13
    /               shift and go to state 15


state 11

    (1) statement -> VAR = . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 18

state 12

    (4) expression -> expression + . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 19

state 13

    (6) expression -> expression * . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 20

state 14

    (5) expression -> expression - . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 21

state 15

    (7) expression -> expression / . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 22

state 16

    (3) expression -> expression ^ . expression
    (3) expression -> . expression ^ expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . VAR

    -               shift and go to state 2
    (               shift and go to state 5
    INT             shift and go to state 3
    FLOAT           shift and go to state 1
    VAR             shift and go to state 8

    expression                     shift and go to state 23

state 17

    (9) expression -> ( expression ) .

    ^               reduce using rule 9 (expression -> ( expression ) .)
    +               reduce using rule 9 (expression -> ( expression ) .)
    -               reduce using rule 9 (expression -> ( expression ) .)
    *               reduce using rule 9 (expression -> ( expression ) .)
    /               reduce using rule 9 (expression -> ( expression ) .)
    $end            reduce using rule 9 (expression -> ( expression ) .)
    )               reduce using rule 9 (expression -> ( expression ) .)


state 18

    (1) statement -> VAR = expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> VAR = expression .)
    ^               shift and go to state 16
    +               shift and go to state 12
    -               shift and go to state 14
    *               shift and go to state 13
    /               shift and go to state 15


state 19

    (4) expression -> expression + expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    ^               reduce using rule 4 (expression -> expression + expression .)
    +               reduce using rule 4 (expression -> expression + expression .)
    -               reduce using rule 4 (expression -> expression + expression .)
    $end            reduce using rule 4 (expression -> expression + expression .)
    )               reduce using rule 4 (expression -> expression + expression .)
    *               shift and go to state 13
    /               shift and go to state 15

  ! *               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! ^               [ shift and go to state 16 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 14 ]


state 20

    (6) expression -> expression * expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    ^               reduce using rule 6 (expression -> expression * expression .)
    +               reduce using rule 6 (expression -> expression * expression .)
    -               reduce using rule 6 (expression -> expression * expression .)
    *               reduce using rule 6 (expression -> expression * expression .)
    /               reduce using rule 6 (expression -> expression * expression .)
    $end            reduce using rule 6 (expression -> expression * expression .)
    )               reduce using rule 6 (expression -> expression * expression .)

  ! ^               [ shift and go to state 16 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 14 ]
  ! *               [ shift and go to state 13 ]
  ! /               [ shift and go to state 15 ]


state 21

    (5) expression -> expression - expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    ^               reduce using rule 5 (expression -> expression - expression .)
    +               reduce using rule 5 (expression -> expression - expression .)
    -               reduce using rule 5 (expression -> expression - expression .)
    $end            reduce using rule 5 (expression -> expression - expression .)
    )               reduce using rule 5 (expression -> expression - expression .)
    *               shift and go to state 13
    /               shift and go to state 15

  ! *               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! ^               [ shift and go to state 16 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 14 ]


state 22

    (7) expression -> expression / expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    ^               reduce using rule 7 (expression -> expression / expression .)
    +               reduce using rule 7 (expression -> expression / expression .)
    -               reduce using rule 7 (expression -> expression / expression .)
    *               reduce using rule 7 (expression -> expression / expression .)
    /               reduce using rule 7 (expression -> expression / expression .)
    $end            reduce using rule 7 (expression -> expression / expression .)
    )               reduce using rule 7 (expression -> expression / expression .)

  ! ^               [ shift and go to state 16 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 14 ]
  ! *               [ shift and go to state 13 ]
  ! /               [ shift and go to state 15 ]


state 23

    (3) expression -> expression ^ expression .
    (3) expression -> expression . ^ expression
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    ^               reduce using rule 3 (expression -> expression ^ expression .)
    $end            reduce using rule 3 (expression -> expression ^ expression .)
    )               reduce using rule 3 (expression -> expression ^ expression .)
    +               shift and go to state 12
    -               shift and go to state 14
    *               shift and go to state 13
    /               shift and go to state 15

  ! +               [ reduce using rule 3 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 3 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 3 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression ^ expression .) ]
  ! ^               [ shift and go to state 16 ]

