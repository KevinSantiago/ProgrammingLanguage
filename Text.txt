import sys
import math
import NewMathSide

sys.path.insert(0, "../..")

if sys.version_info[0] >= 3:
    raw_input = input

tokens = (
    'VAR',
    'FLOAT',
    'INT',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'POWER',
    'EQUALS',
    'LPAREN',
    'RPAREN',
    'X',
)

literals = ['=', '+', '-', '*', '/', '(', ')']

# Tokens

t_VAR = r'[a-wyzA-WYZ][a-zA-Z0-9_]*'
t_PLUS = r'\+'
t_MINUS = r'\-'
t_TIMES = r'\*'
t_DIVIDE = r'\/'
t_POWER = r'\^'
t_EQUALS = r'\='
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_X = r'[x]'

def t_FLOAT(t):
    r'([0-9]+)?([.][0-9]+)([eE][+-]?[0-9]+)?'
    t.value = float(t.value)
    return t


def t_INT(t):
    r'[0-9]+'
    t.value = int(t.value)
    return t


t_ignore = " \t"


def t_newline(t):
    r'\n+'
    t.lexer.lineno += t.value.count("\n")


# def t_eof(t):
#     more = None
#     if more:
#         t.lexer.input(more + '\n')
#         return t.lexer.token()
#     else:
#         return None


def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)

# Build the lexer
import ply.lex as lex
lex.lex()

# Parsing rules

precedence = (
    ('left', 'PLUS', 'MINUS'),
    ('left', 'TIMES', 'DIVIDE'),
    ('left', 'POWER'),
    ('right', 'UMINUS'),
)

# dictionary of names
names = {}


def p_statement_assign(p):
    '''statement : VAR EQUALS expression
                 | VAR EQUALS equation'''
    if p[3] is None:
        pass
    else:
        names[p[1]] = p[3]


def p_statement_expr(p):
    '''statement : expression
                 | equation'''
    if p[1] is None:
        pass
    else:
        print(p[1])


def p_expression_math(p):
    '''expression : expression PLUS expression
                  | expression MINUS expression
                  | expression TIMES expression
                  | expression DIVIDE expression
                  | expression POWER expression'''
    if p[2] == '+':
        p[0] = p[1] + p[3]
    elif p[2] == '-':
        p[0] = p[1] - p[3]
    elif p[2] == '*':
        p[0] = p[1] * p[3]
    elif p[2] == '/':
        p[0] = p[1] / p[3]
    elif p[2] == '^':
        p[0] = math.pow(p[1], p[3])


def p_equation_more(p):
    '''equation : equation PLUS equation
                  | equation MINUS equation
                  | equation TIMES equation
                  | equation DIVIDE equation
                  | equation POWER equation
                  | equation PLUS expression
                  | equation MINUS expression
                  | equation TIMES expression
                  | equation DIVIDE expression
                  | equation POWER expression
                  | expression PLUS equation
                  | expression MINUS equation
                  | expression TIMES equation
                  | expression DIVIDE equation
                  | expression POWER equation'''
    p[0] = str(p[1]) + str(p[2]) + str(p[3])

def p_equation_complex(p):
    'equation : X'
    p[0] = str(p[1])

def p_equation_group(p):
    'equation : LPAREN equation RPAREN'
    print(p[1], p[2], p[3])
    p[0] = str(p[1]) + str(p[2]) + str(p[3])

def p_expression_uminus(p):
    "expression : '-' expression %prec UMINUS"
    p[0] = -p[2]


def p_expression_group(p):
    "expression : LPAREN expression RPAREN"
    p[0] = p[2]


def p_expression_basic(p):
    'expression : term'
    p[0] = p[1]


def p_term_number(p):
    '''term : FLOAT
            | INT'''
    p[0] = p[1]


def p_expression_name(p):
    'expression : VAR'
    try:
        p[0] = names[p[1]]
    except LookupError:
        print("Undefined variable '%s'" % p[1])


def p_error(p):
    if p:
        print("Syntax error at '%s'" % p.value)
    else:
        print("Syntax error at EOF")

import ply.yacc as yacc
yacc.yacc()

while 1:
    try:
        s = raw_input('calc > ')
    except EOFError:
        break
    if not s:
        continue
    yacc.parse(s + '\n')
