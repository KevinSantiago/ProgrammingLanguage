
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B11E7B904D1295AAB5570596F192246'
    
_lr_action_items = {'INTEGRAL':([0,1,8,12,13,14,15,16,17,18,20,],[2,2,2,2,2,2,2,2,2,2,2,]),'RPAREN':([3,4,10,11,19,21,22,23,24,25,26,27,28,],[-14,-13,21,-15,-11,-12,-4,-10,-7,-6,-8,-9,-5,]),'PLUS':([3,4,5,9,10,11,19,21,22,23,24,25,26,27,28,29,],[-14,-13,15,-15,15,-15,-11,-12,15,-10,-7,-6,-8,-9,15,15,]),'FLOAT':([0,1,8,12,13,14,15,16,17,18,20,],[3,3,3,3,3,3,3,3,3,3,3,]),'INT':([0,1,8,12,13,14,15,16,17,18,20,],[4,4,4,4,4,4,4,4,4,4,4,]),'OF':([2,6,],[12,18,]),'DERIVATIVE':([0,1,8,12,13,14,15,16,17,18,20,],[6,6,6,6,6,6,6,6,6,6,6,]),'POWER':([3,4,5,9,10,11,19,21,22,23,24,25,26,27,28,29,],[-14,-13,16,-15,16,-15,-11,-12,16,16,16,16,-8,16,16,16,]),'TIMES':([3,4,5,9,10,11,19,21,22,23,24,25,26,27,28,29,],[-14,-13,17,-15,17,-15,-11,-12,17,-10,17,17,-8,-9,17,17,]),'LPAREN':([0,1,8,12,13,14,15,16,17,18,20,],[1,1,1,1,1,1,1,1,1,1,1,]),'$end':([3,4,5,7,9,11,19,21,22,23,24,25,26,27,28,29,30,],[-14,-13,-3,0,-15,-15,-11,-12,-4,-10,-7,-6,-8,-9,-5,-1,-2,]),'EQUALS':([9,],[20,]),'MINUS':([0,1,3,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[8,8,-14,-13,14,8,-15,14,-15,8,8,8,8,8,8,8,-11,8,-12,14,-10,-7,-6,-8,-9,14,14,]),'DIVIDE':([3,4,5,9,10,11,19,21,22,23,24,25,26,27,28,29,],[-14,-13,13,-15,13,-15,-11,-12,13,-10,13,13,-8,-9,13,13,]),'VAR':([0,1,8,12,13,14,15,16,17,18,20,],[9,11,11,11,11,11,11,11,11,11,11,]),'XVALUE':([20,],[30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[7,]),'expression':([0,1,8,12,13,14,15,16,17,18,20,],[5,10,19,22,23,24,25,26,27,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR EQUALS expression','statement',3,'p_statement_assign','CASOLUS.py',137),
  ('statement -> VAR EQUALS XVALUE','statement',3,'p_statement_xvalue','CASOLUS.py',145),
  ('statement -> expression','statement',1,'p_statement_expr','CASOLUS.py',153),
  ('expression -> INTEGRAL OF expression','expression',3,'p_expression_integral','CASOLUS.py',158),
  ('expression -> DERIVATIVE OF expression','expression',3,'p_expression_derivative','CASOLUS.py',166),
  ('expression -> expression PLUS expression','expression',3,'p_expression_basicMath','CASOLUS.py',175),
  ('expression -> expression MINUS expression','expression',3,'p_expression_basicMath','CASOLUS.py',176),
  ('expression -> expression POWER expression','expression',3,'p_expression_basicMath','CASOLUS.py',177),
  ('expression -> expression TIMES expression','expression',3,'p_expression_basicMath','CASOLUS.py',178),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_basicMath','CASOLUS.py',179),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','CASOLUS.py',193),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','CASOLUS.py',199),
  ('expression -> INT','expression',1,'p_expression_int','CASOLUS.py',205),
  ('expression -> FLOAT','expression',1,'p_expression_float','CASOLUS.py',211),
  ('expression -> VAR','expression',1,'p_expression_var','CASOLUS.py',217),
]
